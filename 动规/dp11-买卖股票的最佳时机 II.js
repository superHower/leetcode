/*
每天都可以 买卖股票。（甚至同一天 先买后卖）
但是 最多 只能持有一股股票。
*/
const prices = [7,1,5,3,6,4]
console.log(maxProfit(prices)) // 7

/**
 * 今天持有  的利润 = { 不买卖  or  前天不持有股票，并在今天买入  }
 * 今天不持有的利润 = { 不买卖  or  前天持有股票，  并在今天卖出 }
 */


var maxProfit = function(prices) {
  let n = prices.length
  let dp = new Array(n).fill(0).map(() => new Array(2).fill(0))// 某天 [持有或不持有的] 的利润
  dp[0][0] = 0          // 第0天 不持有
  dp[0][1] = -prices[0] // 第0天 持有
  for (let i = 1; i < n; i++) {
    dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + prices[i]) // 今天不持有的利润 = { 不买卖  or  前天持有股票，并在今天卖出 }
    dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] - prices[i]) // 今天持有  的利润 = { 不买卖  or  前天不持有股票，并在今天买入  }
  }
  return dp[n - 1][0]

};












/*

示例 1：

输入：prices = [7,1,5,3,6,4]
输出：7
解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3 。
     总利润为 4 + 3 = 7 。
示例 2：

输入：prices = [1,2,3,4,5]
输出：4
解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。
     总利润为 4 。
示例 3：

输入：prices = [7,6,4,3,1]
输出：0
解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 0 。
*/